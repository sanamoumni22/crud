/**
 * Promote user
 *
 * @param oUser
 * @param sRoleName
 * @returns {null|*}
 */
exports.addRole = function(oUser, sRoleName) {
    console.log(this.hasRole(oUser, sRoleName));
    if (! oUser || typeof oUser.roles === 'undefined' || this.hasRole(oUser, sRoleName) === true) {
        return null;
    }

    oUser.roles.push(new role({
        name: sRoleName
    }));

    return oCrud.update(oUser);
};

/**
 *
 * @param oUser
 * @param sRoleName
 * @returns {boolean}
 */
exports.hasRole = function(oUser, sRoleName) {
    if (! oUser || typeof oUser.roles === 'undefined') {
        return false;
    }

    for (let i in oUser.roles) {
        let oRole = oUser.roles[i];
        if (oRole.name === sRoleName) {
            return true;
        }
    }
    return false;
};

/**
 * Check if the given user is an admin
 *
 * @param oUser
 * @returns {boolean}
 */
exports.isAdmin = function(oUser) {
  return this.hasRole(oUser, 'admin'); // @todo conf on admin string
};

/**
 * Check for user restricted entities
 *
 * @param oApiConfiguration
 * @param sUserId
 * @param sAction
 * @param sDocumentType
 * @param oDocument
 * @returns {boolean}
 */
exports.checkUserRestrictions = function(oApiConfiguration, sUserId, sAction, sDocumentType, oDocument) {
  let oEntityConfig = (typeof oApiConfiguration.entities !== 'undefined' && typeof oApiConfiguration.entities[sDocumentType] !== 'undefined')
  ? oApiConfiguration.entities[sDocumentType]
  : null;

  if (! oEntityConfig) {
    return false;
  }

  // "user_restricted" option support
  if (oEntityConfig.user_restricted[sAction] === true) {
    let sField = oEntityConfig.user_restricted.field || oEntityConfig.user_foreign_key_name || oApiConfiguration.user_foreign_key_name;
    if (sUserId.toString() !== oDocument[sField].toString()) {
      return false;
    }
  }
  return true;
};
