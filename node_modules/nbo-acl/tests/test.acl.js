process.env.NODE_ENV = 'test';

let assert = require('assert');
let acl = require('../index');
let config = {  // Entities and allowed fields scope
  entities: {
    "todos": {
      endpoint: 'todos',
      user_restricted: {'GET': true, 'POST': true, 'PUT': true, 'DELETE': true},
      primary_key_name: '_id',
      user_foreign_key_name: 'user_id',
      fields: [  'title', 'deadline', 'content', 'starred', 'user_id', '_id' ] // "done" field is restricted
    }
  }
};

describe('Test ACL layer', function () {
  it('hasRole(): Return false when role not found', function (done) {
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'foo'}]}, 'foo '), 'The space is the role parameter was ignored.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'foo'}]}, 'fool'), 'Nope the user has no "fool" role.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'foo'}]}, 'admin'), 'Houston, we got a problem.');
    done();
  });
  it('hasRole(): Return true when role is found', function (done) {
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'foo'}]}, 'foo'), 'Role not found.');
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'foo-test'}]}, 'foo-test'), 'Role with "-" character not found.');
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'slave'}, {name: 'user'}, {name: 'foo-test'}]}, 'foo-test'), 'Role not found between others.');
    done();
  });

  it('hasRole(): Return false with a user parameter with no "roles" attribute', function (done) {
    assert.strictEqual(false, acl.hasRole({bar: 'foo'}, 'foo'), 'Must return false with no "roles" attribute.');
    done();
  });
  it('hasRole(): Return false with an undefined user or no parameters at all', function (done) {
    assert.strictEqual(false, acl.hasRole(undefined, 'foo'), 'Must return false with no provided user parameter.');
    assert.strictEqual(false, acl.hasRole(), 'Must return false with no parameters.');
    done();
  });
  it('hasRole(): Return false with an empty role parameter', function (done) {
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'test'}]}, ''), 'Must return false with empty "role" parameter.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'test'}]}, 0), 'Must return false with 0 "role" parameter.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'test'}]}, undefined), 'Must return false with undefined "role" parameter.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'test'}]}), 'Must return false no "role" parameter.');
    done();
  });
  it('hasRole(): Case sensitivity', function (done) {
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'Foo'}]}, 'Foo'), 'Case sensitivity issue with upper case first.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'Foo'}]}, 'foo'), 'Case sensitivity issue with upper case first.');
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'ADMIN'}]}, 'ADMIN'), 'Case sensitivity issue with upper case.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'ADMIN'}]}, 'admin'), 'Case sensitivity issue with lower case.');
    done();
  });
  it('hasRole(): Return false when role not found', function (done) {
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'foo'}]}, 'foo '), 'The space is the role parameter was ignored.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'foo'}]}, 'fool'), 'Nope the user has no "fool" role.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'foo'}]}, 'admin'), 'Houston, we got a problem.');
    done();
  });
  it('hasRole(): Return true when role is found', function (done) {
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'foo'}]}, 'foo'), 'Role not found.');
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'foo-test'}]}, 'foo-test'), 'Role with "-" character not found.');
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'slave'}, {name: 'user'}, {name: 'foo-test'}]}, 'foo-test'), 'Role not found between others.');
    done();
  });

  it('hasRole(): Return false with a user parameter with no "roles" attribute', function (done) {
    assert.strictEqual(false, acl.hasRole({bar: 'foo'}, 'foo'), 'Must return false with no "roles" attribute.');
    done();
  });
  it('hasRole(): Return false with an undefined user or no parameters at all', function (done) {
    assert.strictEqual(false, acl.hasRole(undefined, 'foo'), 'Must return false with no provided user parameter.');
    assert.strictEqual(false, acl.hasRole(), 'Must return false with no parameters.');
    done();
  });
  it('hasRole(): Return false with an empty role parameter', function (done) {
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'test'}]}, ''), 'Must return false with empty "role" parameter.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'test'}]}, 0), 'Must return false with 0 "role" parameter.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'test'}]}, undefined), 'Must return false with undefined "role" parameter.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'test'}]}), 'Must return false no "role" parameter.');
    done();
  });
  it('hasRole(): Case sensitivity', function (done) {
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'Foo'}]}, 'Foo'), 'Case sensitivity issue with upper case first.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'Foo'}]}, 'foo'), 'Case sensitivity issue with upper case first.');
    assert.strictEqual(true, acl.hasRole({roles: [{name: 'ADMIN'}]}, 'ADMIN'), 'Case sensitivity issue with upper case.');
    assert.strictEqual(false, acl.hasRole({roles: [{name: 'ADMIN'}]}, 'admin'), 'Case sensitivity issue with lower case.');
    done();
  });
  it('checkUserRestrictions()', function (done) {
    assert.strictEqual(true, acl.checkUserRestrictions(config, 123, 'GET', 'todos', { user_id: 123 }), 'checkUserRestrictions error with valid user.');
    done();
  });
  it('checkUserRestrictions() return false with wrong user', function (done) {
    assert.strictEqual(false, acl.checkUserRestrictions(config, 999, 'GET', 'todos', { user_id: 123 }), 'checkUserRestrictions error with valid user.');
    done();
  });
  it('checkUserRestrictions() return false without configuration found.', function (done) {
    assert.strictEqual(false, acl.checkUserRestrictions({}, 999, 'GET', 'todos', { user_id: 123 }), 'checkUserRestrictions error with valid user.');
    done();
  });
  it('isAdmin() helper method', function (done) {
    assert.strictEqual(true, acl.isAdmin({roles: [{name: 'jerk'}, {name: 'user'}, {name: 'admin'}]}), 'User has admin role should return true.');
    assert.strictEqual(false, acl.isAdmin({roles: [{name: 'jerk'}, {name: 'user'}, {name: 'admini'}]}), 'User has no admin role should return false.');
    done();
  });
});
