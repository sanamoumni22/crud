const DEFAULT_PRIMARY_KEY_NAME = '_id';
const DEFAULT_USER_FOREIGN_KEY_NAME = 'user_id';

let mongoose = require('mongoose');
mongoose.Promise = require('bluebird');

module.exports = function (oApiConfiguration) {

  return {

    /**
     *
     * @param oModel
     * @param sId
     * @returns {Query|Promise<Model>}
     */
    read: function (oModel, sId) {
      // Find one entity by id
      try {
        return oModel.findById(mongoose.Types.ObjectId(sId));
      } catch (e) {
        console.log(e);
        return new Promise(resolve => {
          resolve();
        })
      }
    },

    /**
     *
     * @param oModel
     * @param oParameters
     * @returns {*}
     */
    create: function (oModel, oParameters) {
      let oInstance = new oModel(oParameters);
      return oInstance.save();
    },

    /**
     *
     * @param oInstance
     * @returns {*}
     */
    update: function (oInstance) {
      return oInstance.save();
    },

    /**
     *
     * @param oInstance
     * @returns {*}
     */
    delete: function (oInstance) {
      return oInstance.remove();
    },

    /**
     *
     * @param oModel
     * @param oQueryParam
     * @param oPagination
     * @param aSort
     * @returns {Promise|never|ChildProcess|RegExpExecArray}
     */
    query: function (oModel, oQueryParam, oPagination, aSort) {

      for (let sAttr in oQueryParam) {
        let oCondition = oQueryParam[sAttr];
        for (let sFilter in oCondition) {

          // In case of $not operator override string value with regular expression
          if (sFilter === '$not') {
            oQueryParam[sAttr][sFilter] = new RegExp(oCondition[sFilter]);
          }

        }
      }

      let oQuery = oModel.find(oQueryParam);

      // Handle pagination
      if (oPagination) {
        oQuery.limit(oPagination.limit).skip(oPagination.offset);
      }

      // Handle sort
      if (aSort) {
        // Transcode "DESC"/"ASC" to mongo 1 and -1Â default is "DESC"
        for (var i in aSort) {
          if (aSort[i][1] === 'ASC') {
            aSort[i][1] = 1;
          } else {
            aSort[i][1] = -1;
          }
        }
        oQuery.sort(aSort);
      }

      return oQuery.exec();
    },

    /**
     *
     * @param oModel
     * @param oQueryParam
     * @returns {Promise}
     */
    count: function (oModel, oQueryParam) {
      let oQuery = oModel.countDocuments(oQueryParam);
      return oQuery.exec();
    },

    /**
     * Retrieve mongoose entity fields overrided by configuration scope if any
     *
     * @returns {*|Array}
     */
    getFields: function (oModel) {
      return Object.keys(oModel.schema.paths);
    },

    // @todo DRY

    /**
     * @param sEntity
     * @returns string
     */
    getPrimaryKeyName: function(sEntity) {
      if (typeof oApiConfiguration.entities[sEntity].primary_key_name !== 'undefined') {
        return oApiConfiguration.entities[sEntity].primary_key_name;
      }
      return DEFAULT_PRIMARY_KEY_NAME;
    },

    /**
     * @param sEntity
     * @returns string
     */
    getUserForeignKeyName: function(sEntity) {
      if (typeof oApiConfiguration.entities[sEntity].user_foreign_key_name !== 'undefined') {
        return oApiConfiguration.entities[sEntity].user_foreign_key_name;
      }
      return DEFAULT_USER_FOREIGN_KEY_NAME;
    }

  };
};
