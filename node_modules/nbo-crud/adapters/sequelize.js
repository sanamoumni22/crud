const DEFAULT_PRIMARY_KEY_NAME = 'id';
const DEFAULT_USER_FOREIGN_KEY_NAME = 'user_id';

let sequelize = require('sequelize');

module.exports = function (oApiConfiguration) {

  return {

    read: function (oModel, sId) {
      // Find one entity by id
      return oModel.findByPk(sId);
    },

    create: function (oModel, oParameters) {
      return oModel.create(oParameters);
    },

    update: function (oInstance) {
      return oInstance.save();
    },

    delete: function (oInstance) {
      return oInstance.destroy();
    },

    query: function (oModel, oQueryParam, oPagination, aSort) {

      let oQuery = { where: oQueryParam };

      // Transcode and override query parameter for SQL
      for (let sAttr in oQuery.where) {
        if (typeof oQuery.where[sAttr] === 'object') {
          let oCondition = oQuery.where[sAttr];
          for (let sFilter in oCondition) {

            // Convert regular expressions to SQL LIKE
            if (sFilter === '$regex') {
              oQuery.where[sAttr] = { [sequelize.Op.like] : "%" + oCondition[sFilter] + "%" };
            }

            // Superior operator
            if (sFilter === '$gt') {
              oQuery.where[sAttr] = { [sequelize.Op.gt] : oCondition[sFilter] };
            }

            // Superior or equal operator
            if (sFilter === '$gte') {
              oQuery.where[sAttr] = { [sequelize.Op.gte] : oCondition[sFilter] };
            }

            // Inferior operator
            if (sFilter === '$lt') {
              oQuery.where[sAttr] = { [sequelize.Op.lt] : oCondition[sFilter] };
            }

            // Inferior or equal operator
            if (sFilter === '$lte') {
              oQuery.where[sAttr] = { [sequelize.Op.lte] : oCondition[sFilter] };
            }

            // Different operator
            if (sFilter === '$not') {
              oQuery.where[sAttr] = { [sequelize.Op.not] : oCondition[sFilter] };
            }

          }
        }
      }

      // Handle pagination
      if (oPagination) {
        oQuery.offset = oPagination.offset;
        oQuery.limit = oPagination.limit;
      }

      // Handle sort parameters
      if (aSort) {
        oQuery.order = aSort;
      }

      return oModel.findAll(oQuery);
    },

    count: function (oModel, oQueryParam) {
      let oQuery = { where: oQueryParam };
      return new Promise(resolve => {
        oModel.findAndCountAll(oQuery).then(oResult => {
          return resolve(oResult.count);
        }).catch(e => {
          return reject(e);
        })
      });
    },

    /**
     * Retrieve entity fields
     *
     * @returns {*|Array}
     */
    getFields: function (oModel) {
      return Object.keys(oModel.rawAttributes);
    },


    // @todo DRY

    /**
     * @param sEntity
     * @returns string
     */
    getPrimaryKeyName: function(sEntity) {
      if (typeof oApiConfiguration.entities[sEntity].primary_key_name !== 'undefined') {
        return oApiConfiguration.entities[sEntity].primary_key_name;
      }
      return DEFAULT_PRIMARY_KEY_NAME;
    },

    /**
     * @param sEntity
     * @returns string
     */
    getUserForeignKeyName: function(sEntity) {
      if (typeof oApiConfiguration.entities[sEntity].user_foreign_key_name !== 'undefined') {
        return oApiConfiguration.entities[sEntity].user_foreign_key_name;
      }
      return DEFAULT_USER_FOREIGN_KEY_NAME;
    }

  };
};
