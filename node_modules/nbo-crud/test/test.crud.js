let assert = require('assert');

module.exports = function(oCrud, sDriver, sDatabaseType, oModel, sModelName) {
  let oRecord = {},
    aGarbage = [],
    iRecordsCount = 15;

  describe('Test CRUD component with ' + sDriver + ' driver and ' + sDatabaseType + ' database.', function () {
    it('Has all required methods', function () {
      return new Promise(resolve => {
        assert.strictEqual(typeof oCrud.create, 'function', 'Create method not found.');
        assert.strictEqual(typeof oCrud.read, 'function', 'Read method not found.');
        assert.strictEqual(typeof oCrud.update, 'function', 'Update method not found.');
        assert.strictEqual(typeof oCrud.delete, 'function', 'Delete method not found.');
        assert.strictEqual(typeof oCrud.query, 'function', 'Query method not found.');
        assert.strictEqual(typeof oCrud.getFields, 'function', 'getFields method not found.');
        return resolve();
      });
    });

    it('Create', function () {
      return new Promise(resolve => {
        oCrud.create(oModel, { content: 'Hello unit test!' }).then(oResult => {
            assert.strictEqual(typeof oResult, 'object', 'Response data must be an object, unable to create.');
            assert.strictEqual(oResult.content, 'Hello unit test!', 'Content data not found.');

            aGarbage.push(oResult);
            oRecord = oResult;

            return resolve();
        });
      });
    });

    it('Read', function () {
      return new Promise(resolve => {
        oCrud.read(oModel, oRecord[oCrud.getPrimaryKeyName(sModelName)].toString()).then(oResult => {
          assert.strictEqual(typeof oResult, 'object', 'Response data must be an object, unable to read.');
          assert.strictEqual(oResult.content, 'Hello unit test!', 'Content data not found.');
          return resolve();
        });
      });
    });

    it('Update', function () {
      return new Promise(resolve => {
        oCrud.read(oModel, oRecord[oCrud.getPrimaryKeyName(sModelName)]).then(oFound => {
          oFound.content = 'Content updated!';
          oCrud.update(oFound).then(oResult => {
            assert.strictEqual(typeof oResult, 'object', 'Response data must be an object, unable to update.');
            assert.strictEqual(oResult.content, 'Content updated!', 'Content data not updated.');
            return resolve();
          });
        });
      });
    });

    it('Delete', function () {
      return new Promise(resolve => {
        oCrud.read(oModel, oRecord[oCrud.getPrimaryKeyName(sModelName)]).then(oFound => {
          oCrud.delete(oFound).then(oDeletedDoc => {
            assert.strictEqual(oDeletedDoc, oFound, 'Shit happened on delete.');
            return resolve();
          });
        });
      });
    });

    it('Test query method', function () {
      return new Promise(resolve => {
        // Create 15 records owned by the user
        for (let i = 0; i < iRecordsCount; i++) {
          oCrud.create(oModel, { title: 'Post number #' + i, content: 'Hello unit test!', value: 10*i, user_id: 666 }).then(oCreated => {
            aGarbage.push(oCreated);
            if (i === iRecordsCount - 1) {
              oCrud.query(oModel, {}, {page: 1, limit: iRecordsCount}, []).then(oResult => {
                assert.strictEqual(Array.isArray(oResult), true, 'Response data must be an array, unable to list.');
                assert.strictEqual(oResult.length, iRecordsCount, 'API default limit parameter not respected.');
                return resolve();
              });
            }
          });
        }
      })
    });

    it('Test query method $regex operator', function () {
      return new Promise(resolve => {
        oCrud.query(oModel, { title: { '$regex': 'ber #4' } }, {}, []).then(oResult => {
          assert.strictEqual(Array.isArray(oResult), true, 'Response data must be an array, unable to list.');
          assert.strictEqual(oResult.length, 1, 'More than one record found.');
          assert.strictEqual(oResult[0].title, 'Post number #4', 'Wrong result.');
          return resolve();
        });
      })
    });

    it('Test query method $lt operator', function () {
      return new Promise(resolve => {
        oCrud.query(oModel, { value: { '$lt': 10 } }, {}, []).then(oResult => {
          assert.strictEqual(Array.isArray(oResult), true, 'Response data must be an array, unable to list.');
          assert.strictEqual(oResult.length, 1, 'More than one record found.');
          assert.strictEqual(oResult[0].title, 'Post number #0', 'Wrong result.');
          return resolve();
        });
      })
    });

    it('Test query method $lte operator', function () {
      return new Promise(resolve => {
        oCrud.query(oModel, { value: { '$lte': 10 } }, {}, []).then(oResult => {
          assert.strictEqual(oResult.length, 2, 'More than two records found.');
          return resolve();
        });
      })
    });

    it('Test query method $gt operator', function () {
      return new Promise(resolve => {
        oCrud.query(oModel, { value: { '$gt': 10 } }, {}, []).then(oResult => {
          assert.strictEqual(oResult.length, 13, 'More than 13 records found.');
          return resolve();
        });
      })
    });

    it('Test query method $gte operator', function () {
      return new Promise(resolve => {
        oCrud.query(oModel, { value: { '$gte': 10 } }, {}, []).then(oResult => {
          assert.strictEqual(oResult.length, 14, 'More than 14 records found.');
          return resolve();
        });
      })
    });

    it('Test query method $not operator', function () {
      return new Promise(resolve => {
        oCrud.query(oModel, { title: { '$not': 'Post number #0' } }, {}, []).then(oResult => {
          for (let i in oResult) {
            assert.notStrictEqual(oResult.title, 'Post number #0', 'Error with $not operator.');
            if (i == oResult.length - 1) {
              return resolve();
            }
          }
        });
      })
    });

    it('Test query "count" method', function () {
      return new Promise(resolve => {
        oCrud.count(oModel, {}, {page: 1, limit: (iRecordsCount/3), offset: 0}, []).then(iResult => {
          assert.strictEqual(iResult, iRecordsCount, 'Incorrect count.');
          return resolve();
        }).catch(e => {
          console.log(e);
        });
      })
    });

    it('Test query "limit" parameter', function () {
      return new Promise(resolve => {
        oCrud.query(oModel, {}, {page: 1, limit: iRecordsCount, offset: 0}, []).then(oResult => {
          assert.strictEqual(oResult.length, iRecordsCount, 'API limit parameter not respected.');
          return resolve();
        });
      })
    });

    it('Test query "page" parameter', function () {
      return new Promise(resolve => {
        oCrud.query(oModel, {user_id: 666}, {page: 2, limit: (iRecordsCount/3)}, []).then(oResult => {
          assert.strictEqual(oResult.length, 5, 'Second page results error.');
          return resolve();
        });
      })
    });

    it('Test query "sort" parameter with "DESC" value.', function () {
      return new Promise(resolve => {
        let aSort = [];
        aSort.push(['title', 'DESC']);
        oCrud.query(oModel, {user_id: 666}, {page: 1, limit: iRecordsCount}, aSort).then(oResults => {
          let iFirstResult = 9;
          for (let i in oResults) {
            assert.strictEqual(oResults[i].title, 'Post number #' + iFirstResult , 'Wrong order for "DESC" "sort" parameter.');
            iFirstResult--;
            if (iFirstResult === 4) {
              return resolve();
            }
          }
        });
      })
    });

    it('Test query "sort" parameter with "ASC" value.', function () {
      return new Promise(resolve => {
        let aSort = [];
        aSort.push(['title', 'ASC']);
        oCrud.query(oModel, {}, {page: 1, limit: iRecordsCount}, aSort).then(oResults => {
          let iFirstResult = 0;
          for (let i in oResults) {
            assert.strictEqual(oResults[i].title, 'Post number #' + iFirstResult , 'Wrong order for "ASC" "sort" parameter.');
            return resolve();
          }
        });
      })
    });

    it('Method getFields()', function () {
      return new Promise(resolve => {
        let aFields = oCrud.getFields(oModel);
        assert.strictEqual(Array.isArray(aFields), true, 'Unable to retrieve model fields with this driver.');
        return resolve();
      });
    });

    // Clean created records
    after(function() {
      for (let i in aGarbage) {
        oCrud.delete(aGarbage[i], function(err, oDeletedDoc) {});
      }
    });

  });
};